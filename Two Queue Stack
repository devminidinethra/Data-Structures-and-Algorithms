package DataS;

import java.util.LinkedList;
import java.util.Queue;

public class Two_Queue_Stack_Implementation {
    
    static class TwoQueueStack {
        private Queue<Integer> queue1;
        private Queue<Integer> queue2;
        
        public TwoQueueStack() {
            queue1 = new LinkedList<>();
            queue2 = new LinkedList<>();
        }
        
        public void push(int x) {
            queue1.add(x);
        }
        
        public int pop() {
            if (queue1.isEmpty()) {
                throw new RuntimeException("Stack is empty");
            }
            while (queue1.size() > 1) {
                queue2.add(queue1.remove());
            }
            int poppedElement = queue1.remove();
            Queue<Integer> temp = queue1;
            queue1 = queue2;
            queue2 = temp;
            return poppedElement;
        }
        
        public int top() {
            if (queue1.isEmpty()) {
                throw new RuntimeException("Stack is empty");
            }
            while (queue1.size() > 1) {
                queue2.add(queue1.remove());
            }
            int topElement = queue1.peek();
            queue2.add(queue1.remove());
            Queue<Integer> temp = queue1;
            queue1 = queue2;
            queue2 = temp;
            return topElement;
        }
        
        public boolean isEmpty() {
            return queue1.isEmpty();
        }
    }

    public static void main(String[] args) {
        TwoQueueStack stack = new TwoQueueStack();
        
        stack.push(5);
        stack.push(12);
        stack.push(20);
        
        System.out.println("Top element: " + stack.top()); 
        System.out.println("Popped element: " + stack.pop()); 
        System.out.println("Top element after pop: " + stack.top()); 
        System.out.println("Is stack empty? " + stack.isEmpty()); 
        
        stack.pop();
        stack.pop();
        
        System.out.println("Is stack empty after popping all elements? " + stack.isEmpty()); 
    }
}

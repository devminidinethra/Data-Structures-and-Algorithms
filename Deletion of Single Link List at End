package DataS;

// Define the Node class


// Define the Deletion_Single_Link_End class
public class Deletion_Single_Link_End {
    private Node head; // Head of the linked list
    
    class Node {
        int data;
        Node next;

        // Constructor to initialize a new node with given data
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    // Constructor to initialize an empty linked list
    public Deletion_Single_Link_End() {
        this.head = null;
    }

    // Method to insert a node at the end of the linked list
    public void insertAtEnd(int data) {
        Node newNode = new Node(data); // Create a new node with the given data
        
        // If the linked list is empty, make the new node as head
        if (head == null) {
            head = newNode;
            return;
        }
        
        // Traverse to the last node
        Node last = head;
        while (last.next != null) {
            last = last.next;
        }
        
        // Insert the new node at the end
        last.next = newNode;
    }

    // Method to delete the node at the end of the linked list
    public void deleteAtEnd() {
        // If the list is empty, nothing to delete
        if (head == null) {
            System.out.println("List is empty. Nothing to delete.");
            return;
        }
        
        // If there's only one node in the list
        if (head.next == null) {
            head = null;
            return;
        }
        
        // Traverse to the second last node
        Node secondLast = head;
        while (secondLast.next.next != null) {
            secondLast = secondLast.next;
        }
        
        // Update the next reference of the second last node to null
        secondLast.next = null;
    }

    // Method to print the linked list
    public void printList() {
        Node current = head; // Start from the head node
        System.out.print("Linked List: ");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    // Main method to test the implementation
    public static void main(String[] args) {
        Deletion_Single_Link_End list = new Deletion_Single_Link_End(); // Create an instance of Deletion_Single_Link_End

        // Insert nodes at the end
        list.insertAtEnd(10);
        list.insertAtEnd(22);
        list.insertAtEnd(33);

        // Print the linked list
        list.printList();

        // Delete node from the end
        list.deleteAtEnd();

        // Print the linked list after deletion
        System.out.print("Linked List after deletion at end: ");
        list.printList();
    }
}

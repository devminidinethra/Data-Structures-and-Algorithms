package DataS;

public class Deletion_Doubly_Link_Beginning {
    // Inner class representing a node in the doubly linked list
    private static class Node {
        int data;
        Node prev;
        Node next;

        Node(int data) {
            this.data = data;
            this.prev = null;
            this.next = null;
        }
    }

    private Node head; // Head of the doubly linked list

    public Deletion_Doubly_Link_Beginning() {
        this.head = null;
    }

    // Method to insert a node at the beginning of the list
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
    }

    // Method to delete a node at the beginning of the list
    public void deleteAtBeginning() {
        if (head == null) {
            System.out.println("List is empty. Nothing to delete.");
            return;
        }

        if (head.next == null) {
            // Only one node in the list
            head = null;
        } else {
            // More than one node in the list
            head = head.next;
            head.prev = null;
        }

        System.out.println("Node deleted at the beginning.");
    }

    // Method to print the list forward
    public void printListForward() {
        System.out.print("List (forward): ");
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    // Method to print the list backward
    public void printListBackward() {
        System.out.print("List (backward): ");
        Node current = head;
        // Move to the last node
        while (current != null && current.next != null) {
            current = current.next;
        }
        // Traverse backward using the prev pointers
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.prev;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Deletion_Doubly_Link_Beginning dll = new Deletion_Doubly_Link_Beginning();

        // Insert nodes at the beginning
        dll.insertAtBeginning(11);
        dll.insertAtBeginning(27);
        dll.insertAtBeginning(31);

        // Print the list forward
        dll.printListForward();

        // Print the list backward
        dll.printListBackward();

        // Delete a node at the beginning
        dll.deleteAtBeginning();

        // Print the list forward after deletion
        dll.printListForward();

        // Print the list backward after deletion
        dll.printListBackward();
    }
}
